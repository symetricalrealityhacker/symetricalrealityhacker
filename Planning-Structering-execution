Notes:As a single self learing student. I have Years ahead of me for the reason.
APL is stays as a concept for a long Time.
This Project may take a decade do to the lack of help.
Find Team in Computational Sciences.  

Structering
1.In Python:
1.1 Use Lexer.
1.2 Write APL (First)
1.3 Write pgen (Second)
1.4. Write qgen (thirth)
1.5 Integrate multiplatform API as Container
1.6 abstract syntax tree (AST)
1.7 Implement Security Features
1.8 Add 'Parameter reduction functionality' with means it procedial generation adjust to hardware. 
Adjustments should be given with a editor interface 
for option to choose what precetage is usage from the GPU or CPU.
1.8.2.2 Add up Cloud based netport with simple interface/input
trough ip,docker,http.


2. Port Libaries from different Programming Languages. 
2.1 Port/Pull Assets from different Engines. 
2.2 Create a specialized Editor with acts like a engine (imbeded point 2 and 2.1) with 2 optional 
interfaces, one as a pop-up option and second as a sideway option. that let you: 
*Translate the code into different Programming languages or shows it in a choosen Programming Language.
*Interacts with pgen pulls 2.1 and 2.1 for choosen Integration.
*Allows/Pulls to modfiy the code of the asset. 

3. Testphase
3.1 Run Simple AI written Program for testing.  
3.2 Debbug and improvements 
3.3 Create first Game with it.

4. Distribution
4.1 Distribute on Github
4.2 Create own Website.
4.3 Port Mutlilingual Documentation

5.Experimental Modes.
5.1 Impliment Quantum Computing Liberies.
5.2 Translate QCL to APL for easy coding on Quantum Computing.
5.3 Operation Mode is based on 10 logical Qbits. 
Everthing above is a risk factor and mostly speculative. 
Altough Logical Qbits can go up to 48. Function reduction get a higher stability/function rate.
5.4
Error correction is done with C - Control Flow (APL) adding up to 48 logical qbits. 
As modern quantum computers can create 48 Logical qubits. 
Setting always one Qbit up. (If possible)
5.5 Pose commands (Python) modification from python to act as a quantum intepreter; 
each qubit being treated as a thread would imply that the 
execution of quantum operations on qubits occurs in parallel, 
with each qubit having its own thread of execution.


6.In Future:
6.1 Port APL to Photonic CPU Architecture.
6.2 Add Commad #Photon# to switch mode.
6.3 APL code should be easier portable to Photonic CPUs. 

Notes: forward porting/backporting of software is important in APL. 
As it should work on multi-generation of Architecture. 
Example: Digital CPUs -> Photonic CPUs - -> Quantum Computers. 

